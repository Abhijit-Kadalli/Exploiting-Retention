import cv2
import json
import numpy as np
from moviepy.editor import VideoFileClip, ImageClip, concatenate_videoclips, CompositeVideoClip, AudioFileClip
import os
import random

path = "comment_screenshots"

directories = os.listdir(path)
videos = os.listdir("videos")

def random_video_snippet(video_path,json_path):
    video = VideoFileClip(video_path)

    with open(json_path, 'r') as json_file:
        data = json.load(json_file)
    
    durationOfVideo = video.duration
    durationOfClips = 0
    for image_data in data:
        durationOfClips += image_data['duration']
    
    if durationOfClips > durationOfVideo:
        print("Error: Duration of clips is longer than duration of video.")
        return
    
    randStart = random.randint(0, int(durationOfVideo - durationOfClips))
    randEnd = randStart + durationOfClips

    video = video.subclip(randStart, randEnd)

    return video   

def add_images_with_padding(video, audio_path, json_path, output_path, padding):
    # Load the video
    video_clip = video

    # Load the JSON file
    with open(json_path, 'r') as json_file:
        data = json.load(json_file)

    # Initialize a list to store the clips
    clips = []

    # Iterate over the image paths and durations
    for image_data in data:
        image_path = image_data['path']
        duration = image_data['duration']

        # Create an image clip from the image path
        image = ImageClip(image_path)

        # Set the duration of the image clip
        image = image.set_duration(duration)

        # Add padding to the image clip
        padded_image = image.resize(height=video_clip.h - 2 * padding).margin(
            top=padding, bottom=padding, left=padding, right=padding)

        # Concatenate the padded image clip
        clip = concatenate_videoclips([padded_image])

        # Add the clip to the list
        clips.append(clip)

    # Concatenate all the clips
    final_clip = concatenate_videoclips(clips)

    # Set the duration of the final clip
    final_clip = final_clip.set_duration(video_clip.duration)

    # Overlay the final clip on the original video
    final_video = CompositeVideoClip([video_clip.set_opacity(0.7), final_clip.set_opacity(0.7)])
    audio = AudioFileClip(audio_path)
    final_video = final_video.set_audio(audio)

    # Write the output video to file
    final_video.write_videofile(output_path, codec='libx264', audio_codec='aac', audio=True)


for dir in directories:
    json_path = os.path.join(os.path.join(path,dir),"clip_info.json")
    video_path = os.path.join("videos",random.choice(videos))
    output_path = os.path.join(os.path.join(path,dir), dir + ".mp4")
    audio_path = os.path.join(os.path.join(path,dir), "all_comments.mp3")
    padding = 50 # in pixels
    add_images_with_padding(random_video_snippet(video_path,json_path), audio_path,json_path, output_path, padding)