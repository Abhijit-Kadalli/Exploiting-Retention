import cv2
import json
import numpy as np
from moviepy.editor import VideoFileClip, ImageClip, concatenate_videoclips, CompositeVideoClip, AudioFileClip
import os
import random

path = "comment_screenshots"

directories = os.listdir(path)
videos = os.listdir("videos")

def random_video_snippet(video_path,json_path):
    video = VideoFileClip(video_path)

    with open(json_path, 'r') as json_file:
        data = json.load(json_file)
    
    durationOfVideo = video.duration
    durationOfClips = 0
    for image_data in data:
        durationOfClips += image_data['duration']
    
    if durationOfClips > durationOfVideo:
        print("Error: Duration of clips is longer than duration of video.")
        return
    
    randStart = random.randint(0, int(durationOfVideo - durationOfClips))
    randEnd = randStart + durationOfClips

    video = video.subclip(randStart, randEnd)

    return video   

from moviepy.editor import *

def edit_video(video, audio_path, json_path, output_path):
    # Load the video and audio
    video = video
    audio = AudioFileClip(audio_path)

    with open(json_path, 'r') as json_file:
        data = json.load(json_file)

    # Set the audio of the video to the loaded audio
    video = video.set_audio(audio)

    clips = []

    for image_data in data:
        image_path = image_data['path']
        duration = image_data['duration']

        # Create an image clip from the image path
        image = ImageClip(image_path)

        # Calculate the center position for the image in the video
        image_width, image_height = image.size
        video_width, video_height = video.size
        center_x = (video_width - image_width) // 2
        center_y = (video_height - image_height) // 2

        # Check if the image dimensions are greater than the video dimensions
        if image_width > video_width or image_height > video_height:
            # Calculate the scaling factor
            scale_factor = min(video_width / image_width, video_height / image_height)
            new_width = int(image_width * scale_factor)
            new_height = int(image_height * scale_factor)
            image = image.resize((new_width, new_height))
            center_x = (video_width - image_width) // 2
            center_y = (video_height - image_height) // 2

        # Set the image as a video clip with the same duration as the video
        image = image.set_duration(duration)

        # Position the image at the center of the video
        image = image.set_position((center_x, center_y))

        # Add the clip to the list
        clips.append(image)
    
    # Concatenate the video clips
    final_clips = concatenate_videoclips(clips)

    # Overlay the image on the video
    video = CompositeVideoClip([video, final_clips])

    # Set the output path and write the final video file
    video.write_videofile(output_path, codec='libx264', audio_codec='aac')


for dir in directories:
    json_path = os.path.join(os.path.join(path,dir),"clip_info.json")
    video_path = os.path.join("videos",random.choice(videos))
    output_path = os.path.join(os.path.join(path,dir), dir + ".mp4")
    audio_path = os.path.join(os.path.join(path,dir), "all_comments.mp3")
    padding = 50 # in pixels
    edit_video(random_video_snippet(video_path,json_path), audio_path,json_path, output_path)